# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# ========== type ==========
type Accounts {
  id: ID!
  phone_number: String!
  email: String!
  password: String!
  login_status: Boolean!
  access_level: String!
}

type Blocks {
  id: ID!
  blocking: Int!
  blocked: Int!
}

type Matches {
  id: ID!
  male_user_id: Int!
  female_user_id: Int!
}

type Reports {
  id: ID!
  reporter_id: Int!
  reported_id: Int!
  reason: String!
}

type PageInfo {
  has_next_page: Boolean!
  has_previous_page: Boolean!
  start_cursor: String
  end_cursor: String
}

type UserProfiles {
  id: ID!
  user_id: Int!
  introduction: String!
  interests: String!
  looking_for: String!
}

type UserConnection {
  edges: [UserEdge!]!
  page_info: PageInfo!
}

type UserEdge {
  cursor: String!
  node: Users!
}

type UserSearchFilters {
  id: ID!
  user_id: Int!
  gender: String!
  location: String
}

type Users {
  id: ID!
  uuid: String!
  account_id: Int!
  display_name: String!
  screen_name: String!
  gender: String!
  location: String!
  is_authorize_email: Boolean!
  is_verified_email: Boolean!
  is_verified_age: Boolean!
}

type VerifyEmails {
  id: ID!
  email: String!
  token: String!
  pin_code: String!
}

# ========== query ==========
type Query {
  account(id: ID!): Accounts!

  blocks: [Blocks!]!
  block(id: ID!): Blocks!

  me: Users!

  reports: [Reports!]!
  report(id: ID!): Reports!

  users(first: Int!, after: String!): UserConnection!
  # users: [Users!]!
  user(id: ID!): Users!

  user_search_filters: UserSearchFilters!

  verify_email(code: String!): VerifyEmails!
}

# ========== input ==========
input NewAccounts {
  phone_number: String!
  email: String!
  password: String!
}

input NewBlocks {
  blocking: Int!
  blocked: Int!
}

input NewLogin {
  email: String!
  password: String!
}

input NewReports {
  reporter_id: Int!
  reported_id: Int!
  reason: String!
}

input NewUsers {
  display_name: String!
  screen_name: String!
  gender: String!
}

input NewUserSearchFilters {
  gender: String
  location: String
}

input UpdateUserSearchFilters {
  id: ID!
  gender: String
  location: String
}

input UpdateAccounts {
  id: Int!
  phone_number: String!
  email: String!
  password: String!
}

input UpdateUsers {
  id: Int!
  display_name: String!
  screen_name: String!
  gender: String!
  location: String!
}

input UpdateUserProfiles {
  id: ID!
  user_id: Int!
  introduction: String!
  interests: String!
  looking_for: String!
}

input NewVerifyEmails {
  email: String!
}

# ========== mutation ==========
type Mutation {
  createAccount(input: NewAccounts): Accounts!
  createAccountAndUser(account: NewAccounts!, user: NewUsers!): Users!
  createBlock(input: NewBlocks): Blocks!
  createReport(input: NewReports): Reports!
  login(input: NewLogin): Users!
  createUser(input: NewUsers): Users!
  createUserSearchFilters(input: NewUserSearchFilters): UserSearchFilters!
  updateUserSearchFilters(input: UpdateUserSearchFilters): UserSearchFilters!
  updateAccount(input: UpdateAccounts): Accounts!
  updateUser(input: UpdateUsers): Users!
  createVerifyEmail(input: NewVerifyEmails): VerifyEmails!
}
