# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# ========== type ==========
type Accounts {
  id: ID!
  phone_number: String!
  email: String!
  password: String!
  login_status: Boolean!
  access_level: String!
}

type Blocks {
  id: ID!
  blocking: Int!
  blocked: Int!
  blocked_user: Users
}

type HomeTimeLine {
  tweets: [Tweets!]
  metadata: Metadata!
}

type Likes {
  id: ID!
  send_user_id: Int!
  receive_user_id: Int!
  created_at: Int!
}

type Matches {
  id: ID!
  male_user_id: Int!
  female_user_id: Int!
}

type Metadata {
  total_tweets_count: Int!
  page_info: PageInfo!
}

type Reports {
  id: ID!
  reporter_id: Int!
  reported_id: Int!
  reason: String!
}

type PageInfo {
  has_next_page: Boolean!
  has_previous_page: Boolean!
  start_cursor: String
  end_cursor: String
}

type TweetConnection {
  edges: [TweetsEdge]
  page_info: PageInfo!
}

type TweetsEdge {
  cursor: String!
  node: Tweets!
}

type Tweets {
  id: ID!
  text: String!
  format_created_at: String!
  is_liked: Boolean!
  like_cnt: Int!
  comment_cnt: Int!
  user: Users!
}

type UserProfiles {
  id: ID!
  user_id: Int!
	introduction: String!

	height_id: Int!
	body_type_id: Int!
	blood_type_id: Int!
	residence_id: Int!
	hometown_id: Int!
	occupation_id: Int!
	education_id: Int!
	annual_income_id: Int!
	smoking_id: Int!
	drinking_id: Int!

	siblings_id: Int!
	language_id: Int!
	interests_id: Int!
	looking_for_id: Int!

	school_name: String!
	job_title: String!

	marital_history_id: Int!
	presence_of_children_id: Int!
	intentions_towards_marriage_id: Int!
	desire_for_children_id: Int!
	household_chores_and_child_rearing_id: Int!
	indeal_first_encointer_id: Int!
	dating_expenses_id: Int!

	presonality_type_id: Int!
	sociability_id: Int!
	roommates_id: Int!
	days_off_id: Int!
	hobbies_id: Int!
}

type UserConnection {
  edges: [UserEdge!]!
  page_info: PageInfo!
}

type UserEdge {
  cursor: String!
  node: ResponseUsers!
}

type UserSearchFilters {
  id: ID!
  user_id: Int!
  gender: String!
  location: String
  purpose: Int!
  has_introduction: Boolean!
  height_id: Int!
  body_type_id: Int!
  blood_type_id: Int!
  # residence_country_id: Int!
  # residence_state_id: Int!
  # hometown_country_id: Int!
  # hometown_state_id: Int!
  occupation_id: Int!
  education_id: Int!
  annual_income_id: Int!
  smoking_id: Int!
  drinking_id: Int!
}

type Users {
  id: ID!
  uuid: String!
  account_id: Int!
  display_name: String!
  screen_name: String!
  gender: String!
  age: Int!
  location: String!
  is_authorize_email: Boolean!
  is_verified_email: Boolean!
  is_verified_age: Boolean!
}

type ResetPasswords {
  id: ID!
  user_id: Int!
  token: String!
  reset_key: String!
  expire_at: Int!
}

type VerifyEmails {
  id: ID!
  email: String!
  token: String!
  pin_code: String!
}

# ========== query ==========
type Query {
  account(id: ID!): Accounts!

  blocks: [Blocks!]!
  block(id: ID!): Blocks!

  me: ResponseUsers!

  reports: [Reports!]!
  report(id: ID!): Reports!

  home(first: Int!, after: String!): HomeTimeLine!

  tweets(user_id: Int!): TweetConnection!
  tweet(id: ID!): Tweets!

  users(first: Int!, after: String!): UserConnection!
  # users: [Users!]!
  user(screen_name: String!): ResponseUsers!

  user_search_filters: UserSearchFilters!

  verify_email(code: String!): VerifyEmails!

  reset_password(token: String!): ResetPasswords!
}

# ========== input ==========
input NewAccounts {
  phone_number: String!
  email: String!
  password: String!
}

input NewBlocks {
  blocking: Int!
  blocked: Int!
}

input NewLikes {
  receive_user_id: Int!
}

input NewLogin {
  email: String!
  password: String!
}

input NewReports {
  reporter_id: Int!
  reported_id: Int!
  reason: String!
}

input NewUsers {
  display_name: String!
  screen_name: String!
  gender: String!
}

input NewUserSearchFilters {
  gender: String
  location: String
  
}

input UpdateUserSearchFilters {
  id: ID!
  gender: String
  location: String
  purpose: Int!
  has_introduction: Boolean!
  height_id: Int!
  body_type_id: Int!
  blood_type_id: Int!
  # residence_country_id: Int!
  # residence_state_id: Int!
  # hometown_country_id: Int!
  # hometown_state_id: Int!
  occupation_id: Int!
  education_id: Int!
  annual_income_id: Int!
  smoking_id: Int!
  drinking_id: Int!
}

input UpdateAccounts {
  id: Int
  phone_number: String
  email: String
  current_password: String
  new_password: String
}

input UpdateUsers {
  id: Int
  display_name: String
  screen_name: String
  gender: String!
  age: Int
  location: String
}

input UpdateUserProfiles {
  id: ID!
  user_id: Int
	introduction: String

	height: Int
	body_type_id: Int
	blood_type_id: Int
	residence_country_id: Int
  residence_state_id: Int
	hometown_country_id: Int
  hometown_state_id: Int
	occupation_id: Int
	education_id: Int
	annual_income_id: Int
	smoking_id: Int
	drinking_id: Int

	siblings_id: Int
	language_id: Int
	interests_id: Int
	looking_for_id: Int

	school_name: String
	job_title: String

	marital_history_id: Int
	presence_of_children_id: Int
	intentions_towards_marriage_id: Int
	desire_for_children_id: Int
	household_chores_and_child_rearing_id: Int
	meeting_preference_id: Int
	dating_expenses_id: Int

	personality_type_id: Int
	sociability_id: Int
	roommates_id: Int
	days_off_id: Int
	hobbies_id: Int
}

input NewVerifyEmails {
  email: String!
  token: String!
  pin_code: String!
}

# ========== mutation ==========
type Mutation {
  createAccount(input: NewAccounts): Accounts!
  createAccountAndUser(account: NewAccounts!, user: NewUsers!): Users!
  createBlock(input: NewBlocks): Blocks!
  createLike(input: NewLikes): Likes!
  createReport(input: NewReports): Reports!
  login(email: String!, password: String!): Users!
  createUser(input: NewUsers): Users!
  createUserSearchFilters(input: NewUserSearchFilters): UserSearchFilters!
  updateUserSearchFilters(input: UpdateUserSearchFilters): UserSearchFilters!
  updateAccount(input: UpdateAccounts): Accounts!
  updateUser(input: UpdateUsers): Users!
  updateUserProfile(input: UpdateUserProfiles): UserProfiles!
  createVerifyEmail(email: String!): VerifyEmails!

  createResetPassword(email: String!): ResetPasswords!
  updateResetPassword(reset_key: String!, password: String!): Users!

  createTweet(text: String!): Tweets!
}
