package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"log"
	"strconv"

	"github.com/takeuchi-shogo/k8s-go-sample/domain/models"
	"github.com/takeuchi-shogo/k8s-go-sample/graphql/types"
)

// LoginStatus is the resolver for the login_status field.
func (r *accountsResolver) LoginStatus(ctx context.Context, obj *models.Accounts) (bool, error) {
	panic(fmt.Errorf("not implemented: LoginStatus - login_status"))
}

// AccessLevel is the resolver for the access_level field.
func (r *accountsResolver) AccessLevel(ctx context.Context, obj *models.Accounts) (string, error) {
	panic(fmt.Errorf("not implemented: AccessLevel - access_level"))
}

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input *types.NewAccounts) (*models.Accounts, error) {
	a := &models.Accounts{
		PhoneNumber: input.PhoneNumber,
		Email:       input.Email,
		Password:    input.Password,
	}
	log.Println(a)
	return a, nil
}

// CreateBlock is the resolver for the createBlock field.
func (r *mutationResolver) CreateBlock(ctx context.Context, input *types.NewBlocks) (*models.Blocks, error) {
	panic(fmt.Errorf("not implemented: CreateBlock - createBlock"))
}

// CreateReport is the resolver for the createReport field.
func (r *mutationResolver) CreateReport(ctx context.Context, input *types.NewReports) (*models.Reports, error) {
	panic(fmt.Errorf("not implemented: CreateReport - createReport"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input types.NewUsers) (*models.Users, error) {
	panic(fmt.Errorf("not implemented: CreateUsers - createUsers"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.Users, error) {
	for i := 0; i < 5; i++ {
		// pass, _ := utils.GenerateFromPassword("pass")
		user := &models.Users{
			// ID: utils.RandomString(10),
			// Name:     utils.RandomOwner(),
			// Password: pass,
		}
		r.users = append(r.users, user)
	}

	return r.users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*models.Users, error) {
	// pass, _ := utils.GenerateFromPassword("pass")
	ids, _ := strconv.Atoi(id)
	r.user = &models.Users{
		ID: ids,
		// Name:     "test" + id,
		// Password: pass,
	}
	return r.user, nil
}

// SceenName is the resolver for the sceen_name field.
func (r *usersResolver) SceenName(ctx context.Context, obj *models.Users) (string, error) {
	panic(fmt.Errorf("not implemented: SceenName - sceen_name"))
}

// IsVerifiedEmail is the resolver for the is_verified_email field.
func (r *usersResolver) IsVerifiedEmail(ctx context.Context, obj *models.Users) (bool, error) {
	panic(fmt.Errorf("not implemented: IsVerifiedEmail - is_verified_email"))
}

// Accounts returns AccountsResolver implementation.
func (r *Resolver) Accounts() AccountsResolver { return &accountsResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Users returns UsersResolver implementation.
func (r *Resolver) Users() UsersResolver { return &usersResolver{r} }

type accountsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type usersResolver struct{ *Resolver }
