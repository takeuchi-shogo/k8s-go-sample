# Where are all the schema files located? globs are supported eg  src/**/*.graphqlqls
schema:
  - graphql/query/*.graphql

# Where should the generated server code go?
exec:
  filename: graphql/generated.go
  package: graphql

# Uncomment to enable federation
# federation:
#   filename: graphql/federation.go
#   package: graphql

# Where should any generated models go?
model:
  filename: graphql/types/models_gen.go
  package: types

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graphql
  package: graphql

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
#  - "github.com/takeuchi-shogo/k8s-go-sample/domain/models"

# This section declares type mapping between the graphqlQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  Accounts:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.Accounts"
  Blocks:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.Blocks"
  Likes:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.Likes"
  Reports:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.Reports"
  ResponseUserProfiles:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.ResponseUserProfiles"
  ResponseUsers:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.ResponseUsers"
  ResetPasswords:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.ResetPasswords"
  Tweets:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.Tweets"
    fields:
      user:
        resolver: true
  UserProfiles:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.UserProfiles"
  Users:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.Users"
  UserSearchFilters:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.UserSearchFilters"
  VerifyEmails:
    model:
      - "github.com/takeuchi-shogo/k8s-go-sample/domain/models.VerifyEmails"
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
