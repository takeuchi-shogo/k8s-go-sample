package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/takeuchi-shogo/k8s-go-sample/graph/model"
	"github.com/takeuchi-shogo/k8s-go-sample/utils"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	todo := &model.Todo{
		Text: input.Text,
		ID:   fmt.Sprintf("T%d", rand),
		User: &model.User{ID: input.UserID, Name: "user " + input.UserID},
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUsers - createUsers"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	for i := 0; i < 5; i++ {
		pass, _ := utils.GenerateFromPassword("pass")
		user := &model.User{
			ID:       utils.RandomString(10),
			Name:     utils.RandomOwner(),
			Password: pass,
		}
		r.users = append(r.users, user)
	}

	return r.users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	pass, _ := utils.GenerateFromPassword("pass")
	r.user = &model.User{
		ID:       id,
		Name:     "test" + id,
		Password: pass,
	}
	return r.user, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	for i := 0; i < 5; i++ {
		text := utils.RandomString(50)
		v := utils.RandomInt(100)
		done := false
		if v%2 == 0 {
			done = true
		}
		todo := &model.Todo{
			ID:   utils.RandomString(15),
			Text: text,
			Done: done,
		}
		r.todos = append(r.todos, todo)
	}

	return r.todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
